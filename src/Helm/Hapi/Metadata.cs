// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hapi/chart/metadata.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hapi.Chart {

  /// <summary>Holder for reflection information generated from hapi/chart/metadata.proto</summary>
  public static partial class MetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for hapi/chart/metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChloYXBpL2NoYXJ0L21ldGFkYXRhLnByb3RvEgpoYXBpLmNoYXJ0IjYKCk1h",
            "aW50YWluZXISDAoEbmFtZRgBIAEoCRINCgVlbWFpbBgCIAEoCRILCgN1cmwY",
            "AyABKAki1QMKCE1ldGFkYXRhEgwKBG5hbWUYASABKAkSDAoEaG9tZRgCIAEo",
            "CRIPCgdzb3VyY2VzGAMgAygJEg8KB3ZlcnNpb24YBCABKAkSEwoLZGVzY3Jp",
            "cHRpb24YBSABKAkSEAoIa2V5d29yZHMYBiADKAkSKwoLbWFpbnRhaW5lcnMY",
            "ByADKAsyFi5oYXBpLmNoYXJ0Lk1haW50YWluZXISDgoGZW5naW5lGAggASgJ",
            "EgwKBGljb24YCSABKAkSEgoKYXBpVmVyc2lvbhgKIAEoCRIRCgljb25kaXRp",
            "b24YCyABKAkSDAoEdGFncxgMIAEoCRISCgphcHBWZXJzaW9uGA0gASgJEhIK",
            "CmRlcHJlY2F0ZWQYDiABKAgSFQoNdGlsbGVyVmVyc2lvbhgPIAEoCRI6Cgth",
            "bm5vdGF0aW9ucxgQIAMoCzIlLmhhcGkuY2hhcnQuTWV0YWRhdGEuQW5ub3Rh",
            "dGlvbnNFbnRyeRITCgtrdWJlVmVyc2lvbhgRIAEoCRoyChBBbm5vdGF0aW9u",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiIAoGRW5n",
            "aW5lEgsKB1VOS05PV04QABIJCgVHT1RQTBABQgdaBWNoYXJ0YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hapi.Chart.Maintainer), global::Hapi.Chart.Maintainer.Parser, new[]{ "Name", "Email", "Url" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Hapi.Chart.Metadata), global::Hapi.Chart.Metadata.Parser, new[]{ "Name", "Home", "Sources", "Version", "Description", "Keywords", "Maintainers", "Engine", "Icon", "ApiVersion", "Condition", "Tags", "AppVersion", "Deprecated", "TillerVersion", "Annotations", "KubeVersion" }, null, new[]{ typeof(global::Hapi.Chart.Metadata.Types.Engine) }, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Maintainer describes a Chart maintainer.
  /// </summary>
  public sealed partial class Maintainer : pb::IMessage<Maintainer> {
    private static readonly pb::MessageParser<Maintainer> _parser = new pb::MessageParser<Maintainer>(() => new Maintainer());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Maintainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hapi.Chart.MetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maintainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maintainer(Maintainer other) : this() {
      name_ = other.name_;
      email_ = other.email_;
      url_ = other.url_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Maintainer Clone() {
      return new Maintainer(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name is a user name or organization name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 2;
    private string email_ = "";
    /// <summary>
    /// Email is an optional email address to contact the named maintainer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 3;
    private string url_ = "";
    /// <summary>
    /// Url is an optional URL to an address for the named maintainer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Maintainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Maintainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Email != other.Email) return false;
      if (Url != other.Url) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Email);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Url);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Maintainer other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Email = input.ReadString();
            break;
          }
          case 26: {
            Url = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///	Metadata for a Chart file. This models the structure of a Chart.yaml file.
  ///
  /// 	Spec: https://k8s.io/helm/blob/master/docs/design/chart_format.md#the-chart-file
  /// </summary>
  public sealed partial class Metadata : pb::IMessage<Metadata> {
    private static readonly pb::MessageParser<Metadata> _parser = new pb::MessageParser<Metadata>(() => new Metadata());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Metadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hapi.Chart.MetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata(Metadata other) : this() {
      name_ = other.name_;
      home_ = other.home_;
      sources_ = other.sources_.Clone();
      version_ = other.version_;
      description_ = other.description_;
      keywords_ = other.keywords_.Clone();
      maintainers_ = other.maintainers_.Clone();
      engine_ = other.engine_;
      icon_ = other.icon_;
      apiVersion_ = other.apiVersion_;
      condition_ = other.condition_;
      tags_ = other.tags_;
      appVersion_ = other.appVersion_;
      deprecated_ = other.deprecated_;
      tillerVersion_ = other.tillerVersion_;
      annotations_ = other.annotations_.Clone();
      kubeVersion_ = other.kubeVersion_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Metadata Clone() {
      return new Metadata(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The name of the chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "home" field.</summary>
    public const int HomeFieldNumber = 2;
    private string home_ = "";
    /// <summary>
    /// The URL to a relevant project page, git repo, or contact person
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Home {
      get { return home_; }
      set {
        home_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sources" field.</summary>
    public const int SourcesFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_sources_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> sources_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Source is the URL to the source code of this chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sources {
      get { return sources_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 4;
    private string version_ = "";
    /// <summary>
    /// A SemVer 2 conformant version string of the chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Version {
      get { return version_; }
      set {
        version_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 5;
    private string description_ = "";
    /// <summary>
    /// A one-sentence description of the chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "keywords" field.</summary>
    public const int KeywordsFieldNumber = 6;
    private static readonly pb::FieldCodec<string> _repeated_keywords_codec
        = pb::FieldCodec.ForString(50);
    private readonly pbc::RepeatedField<string> keywords_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// A list of string keywords
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Keywords {
      get { return keywords_; }
    }

    /// <summary>Field number for the "maintainers" field.</summary>
    public const int MaintainersFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Hapi.Chart.Maintainer> _repeated_maintainers_codec
        = pb::FieldCodec.ForMessage(58, global::Hapi.Chart.Maintainer.Parser);
    private readonly pbc::RepeatedField<global::Hapi.Chart.Maintainer> maintainers_ = new pbc::RepeatedField<global::Hapi.Chart.Maintainer>();
    /// <summary>
    /// A list of name and URL/email address combinations for the maintainer(s)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hapi.Chart.Maintainer> Maintainers {
      get { return maintainers_; }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 8;
    private string engine_ = "";
    /// <summary>
    /// The name of the template engine to use. Defaults to 'gotpl'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Engine {
      get { return engine_; }
      set {
        engine_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "icon" field.</summary>
    public const int IconFieldNumber = 9;
    private string icon_ = "";
    /// <summary>
    /// The URL to an icon file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Icon {
      get { return icon_; }
      set {
        icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "apiVersion" field.</summary>
    public const int ApiVersionFieldNumber = 10;
    private string apiVersion_ = "";
    /// <summary>
    /// The API Version of this chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ApiVersion {
      get { return apiVersion_; }
      set {
        apiVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "condition" field.</summary>
    public const int ConditionFieldNumber = 11;
    private string condition_ = "";
    /// <summary>
    /// The condition to check to enable chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Condition {
      get { return condition_; }
      set {
        condition_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 12;
    private string tags_ = "";
    /// <summary>
    /// The tags to check to enable chart
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Tags {
      get { return tags_; }
      set {
        tags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "appVersion" field.</summary>
    public const int AppVersionFieldNumber = 13;
    private string appVersion_ = "";
    /// <summary>
    /// The version of the application enclosed inside of this chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVersion {
      get { return appVersion_; }
      set {
        appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "deprecated" field.</summary>
    public const int DeprecatedFieldNumber = 14;
    private bool deprecated_;
    /// <summary>
    /// Whether or not this chart is deprecated
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deprecated {
      get { return deprecated_; }
      set {
        deprecated_ = value;
      }
    }

    /// <summary>Field number for the "tillerVersion" field.</summary>
    public const int TillerVersionFieldNumber = 15;
    private string tillerVersion_ = "";
    /// <summary>
    /// TillerVersion is a SemVer constraints on what version of Tiller is required.
    /// See SemVer ranges here: https://github.com/Masterminds/semver#basic-comparisons
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TillerVersion {
      get { return tillerVersion_; }
      set {
        tillerVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "annotations" field.</summary>
    public const int AnnotationsFieldNumber = 16;
    private static readonly pbc::MapField<string, string>.Codec _map_annotations_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 130);
    private readonly pbc::MapField<string, string> annotations_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Annotations are additional mappings uninterpreted by Tiller,
    /// made available for inspection by other applications.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Annotations {
      get { return annotations_; }
    }

    /// <summary>Field number for the "kubeVersion" field.</summary>
    public const int KubeVersionFieldNumber = 17;
    private string kubeVersion_ = "";
    /// <summary>
    /// KubeVersion is a SemVer constraint specifying the version of Kubernetes required.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string KubeVersion {
      get { return kubeVersion_; }
      set {
        kubeVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Metadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Metadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Home != other.Home) return false;
      if(!sources_.Equals(other.sources_)) return false;
      if (Version != other.Version) return false;
      if (Description != other.Description) return false;
      if(!keywords_.Equals(other.keywords_)) return false;
      if(!maintainers_.Equals(other.maintainers_)) return false;
      if (Engine != other.Engine) return false;
      if (Icon != other.Icon) return false;
      if (ApiVersion != other.ApiVersion) return false;
      if (Condition != other.Condition) return false;
      if (Tags != other.Tags) return false;
      if (AppVersion != other.AppVersion) return false;
      if (Deprecated != other.Deprecated) return false;
      if (TillerVersion != other.TillerVersion) return false;
      if (!Annotations.Equals(other.Annotations)) return false;
      if (KubeVersion != other.KubeVersion) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Home.Length != 0) hash ^= Home.GetHashCode();
      hash ^= sources_.GetHashCode();
      if (Version.Length != 0) hash ^= Version.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      hash ^= keywords_.GetHashCode();
      hash ^= maintainers_.GetHashCode();
      if (Engine.Length != 0) hash ^= Engine.GetHashCode();
      if (Icon.Length != 0) hash ^= Icon.GetHashCode();
      if (ApiVersion.Length != 0) hash ^= ApiVersion.GetHashCode();
      if (Condition.Length != 0) hash ^= Condition.GetHashCode();
      if (Tags.Length != 0) hash ^= Tags.GetHashCode();
      if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
      if (Deprecated != false) hash ^= Deprecated.GetHashCode();
      if (TillerVersion.Length != 0) hash ^= TillerVersion.GetHashCode();
      hash ^= Annotations.GetHashCode();
      if (KubeVersion.Length != 0) hash ^= KubeVersion.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Home.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Home);
      }
      sources_.WriteTo(output, _repeated_sources_codec);
      if (Version.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Version);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Description);
      }
      keywords_.WriteTo(output, _repeated_keywords_codec);
      maintainers_.WriteTo(output, _repeated_maintainers_codec);
      if (Engine.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Engine);
      }
      if (Icon.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Icon);
      }
      if (ApiVersion.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(ApiVersion);
      }
      if (Condition.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Condition);
      }
      if (Tags.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Tags);
      }
      if (AppVersion.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(AppVersion);
      }
      if (Deprecated != false) {
        output.WriteRawTag(112);
        output.WriteBool(Deprecated);
      }
      if (TillerVersion.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(TillerVersion);
      }
      annotations_.WriteTo(output, _map_annotations_codec);
      if (KubeVersion.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(KubeVersion);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Home.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Home);
      }
      size += sources_.CalculateSize(_repeated_sources_codec);
      if (Version.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Version);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      size += keywords_.CalculateSize(_repeated_keywords_codec);
      size += maintainers_.CalculateSize(_repeated_maintainers_codec);
      if (Engine.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Engine);
      }
      if (Icon.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
      }
      if (ApiVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ApiVersion);
      }
      if (Condition.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Condition);
      }
      if (Tags.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tags);
      }
      if (AppVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
      }
      if (Deprecated != false) {
        size += 1 + 1;
      }
      if (TillerVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TillerVersion);
      }
      size += annotations_.CalculateSize(_map_annotations_codec);
      if (KubeVersion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(KubeVersion);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Metadata other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Home.Length != 0) {
        Home = other.Home;
      }
      sources_.Add(other.sources_);
      if (other.Version.Length != 0) {
        Version = other.Version;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      keywords_.Add(other.keywords_);
      maintainers_.Add(other.maintainers_);
      if (other.Engine.Length != 0) {
        Engine = other.Engine;
      }
      if (other.Icon.Length != 0) {
        Icon = other.Icon;
      }
      if (other.ApiVersion.Length != 0) {
        ApiVersion = other.ApiVersion;
      }
      if (other.Condition.Length != 0) {
        Condition = other.Condition;
      }
      if (other.Tags.Length != 0) {
        Tags = other.Tags;
      }
      if (other.AppVersion.Length != 0) {
        AppVersion = other.AppVersion;
      }
      if (other.Deprecated != false) {
        Deprecated = other.Deprecated;
      }
      if (other.TillerVersion.Length != 0) {
        TillerVersion = other.TillerVersion;
      }
      annotations_.Add(other.annotations_);
      if (other.KubeVersion.Length != 0) {
        KubeVersion = other.KubeVersion;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Home = input.ReadString();
            break;
          }
          case 26: {
            sources_.AddEntriesFrom(input, _repeated_sources_codec);
            break;
          }
          case 34: {
            Version = input.ReadString();
            break;
          }
          case 42: {
            Description = input.ReadString();
            break;
          }
          case 50: {
            keywords_.AddEntriesFrom(input, _repeated_keywords_codec);
            break;
          }
          case 58: {
            maintainers_.AddEntriesFrom(input, _repeated_maintainers_codec);
            break;
          }
          case 66: {
            Engine = input.ReadString();
            break;
          }
          case 74: {
            Icon = input.ReadString();
            break;
          }
          case 82: {
            ApiVersion = input.ReadString();
            break;
          }
          case 90: {
            Condition = input.ReadString();
            break;
          }
          case 98: {
            Tags = input.ReadString();
            break;
          }
          case 106: {
            AppVersion = input.ReadString();
            break;
          }
          case 112: {
            Deprecated = input.ReadBool();
            break;
          }
          case 122: {
            TillerVersion = input.ReadString();
            break;
          }
          case 130: {
            annotations_.AddEntriesFrom(input, _map_annotations_codec);
            break;
          }
          case 138: {
            KubeVersion = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Metadata message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("GOTPL")] Gotpl = 1,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
