// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hapi/version/version.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hapi.Version {

  /// <summary>Holder for reflection information generated from hapi/version/version.proto</summary>
  public static partial class VersionReflection {

    #region Descriptor
    /// <summary>File descriptor for hapi/version/version.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VersionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpoYXBpL3ZlcnNpb24vdmVyc2lvbi5wcm90bxIMaGFwaS52ZXJzaW9uIkYK",
            "B1ZlcnNpb24SDwoHc2VtX3ZlchgBIAEoCRISCgpnaXRfY29tbWl0GAIgASgJ",
            "EhYKDmdpdF90cmVlX3N0YXRlGAMgASgJQglaB3ZlcnNpb25iBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hapi.Version.Version), global::Hapi.Version.Version.Parser, new[]{ "SemVer", "GitCommit", "GitTreeState" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hapi.Version.VersionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      semVer_ = other.semVer_;
      gitCommit_ = other.gitCommit_;
      gitTreeState_ = other.gitTreeState_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "sem_ver" field.</summary>
    public const int SemVerFieldNumber = 1;
    private string semVer_ = "";
    /// <summary>
    /// Sem ver string for the version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SemVer {
      get { return semVer_; }
      set {
        semVer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_commit" field.</summary>
    public const int GitCommitFieldNumber = 2;
    private string gitCommit_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitCommit {
      get { return gitCommit_; }
      set {
        gitCommit_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "git_tree_state" field.</summary>
    public const int GitTreeStateFieldNumber = 3;
    private string gitTreeState_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GitTreeState {
      get { return gitTreeState_; }
      set {
        gitTreeState_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SemVer != other.SemVer) return false;
      if (GitCommit != other.GitCommit) return false;
      if (GitTreeState != other.GitTreeState) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SemVer.Length != 0) hash ^= SemVer.GetHashCode();
      if (GitCommit.Length != 0) hash ^= GitCommit.GetHashCode();
      if (GitTreeState.Length != 0) hash ^= GitTreeState.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SemVer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SemVer);
      }
      if (GitCommit.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(GitCommit);
      }
      if (GitTreeState.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(GitTreeState);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SemVer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SemVer);
      }
      if (GitCommit.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitCommit);
      }
      if (GitTreeState.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GitTreeState);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.SemVer.Length != 0) {
        SemVer = other.SemVer;
      }
      if (other.GitCommit.Length != 0) {
        GitCommit = other.GitCommit;
      }
      if (other.GitTreeState.Length != 0) {
        GitTreeState = other.GitTreeState;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SemVer = input.ReadString();
            break;
          }
          case 18: {
            GitCommit = input.ReadString();
            break;
          }
          case 26: {
            GitTreeState = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
