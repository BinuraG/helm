// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: hapi/release/release.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Hapi.Release {

  /// <summary>Holder for reflection information generated from hapi/release/release.proto</summary>
  public static partial class ReleaseReflection {

    #region Descriptor
    /// <summary>File descriptor for hapi/release/release.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ReleaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChpoYXBpL3JlbGVhc2UvcmVsZWFzZS5wcm90bxIMaGFwaS5yZWxlYXNlGhdo",
            "YXBpL3JlbGVhc2UvaG9vay5wcm90bxoXaGFwaS9yZWxlYXNlL2luZm8ucHJv",
            "dG8aF2hhcGkvY2hhcnQvY29uZmlnLnByb3RvGhZoYXBpL2NoYXJ0L2NoYXJ0",
            "LnByb3RvItgBCgdSZWxlYXNlEgwKBG5hbWUYASABKAkSIAoEaW5mbxgCIAEo",
            "CzISLmhhcGkucmVsZWFzZS5JbmZvEiAKBWNoYXJ0GAMgASgLMhEuaGFwaS5j",
            "aGFydC5DaGFydBIiCgZjb25maWcYBCABKAsyEi5oYXBpLmNoYXJ0LkNvbmZp",
            "ZxIQCghtYW5pZmVzdBgFIAEoCRIhCgVob29rcxgGIAMoCzISLmhhcGkucmVs",
            "ZWFzZS5Ib29rEg8KB3ZlcnNpb24YByABKAUSEQoJbmFtZXNwYWNlGAggASgJ",
            "QglaB3JlbGVhc2ViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Hapi.Release.HookReflection.Descriptor, global::Hapi.Release.InfoReflection.Descriptor, global::Hapi.Chart.ConfigReflection.Descriptor, global::Hapi.Chart.ChartReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Hapi.Release.Release), global::Hapi.Release.Release.Parser, new[]{ "Name", "Info", "Chart", "Config", "Manifest", "Hooks", "Version", "Namespace" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Release describes a deployment of a chart, together with the chart
  /// and the variables used to deploy that chart.
  /// </summary>
  public sealed partial class Release : pb::IMessage<Release> {
    private static readonly pb::MessageParser<Release> _parser = new pb::MessageParser<Release>(() => new Release());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Release> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Hapi.Release.ReleaseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Release() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Release(Release other) : this() {
      name_ = other.name_;
      Info = other.info_ != null ? other.Info.Clone() : null;
      Chart = other.chart_ != null ? other.Chart.Clone() : null;
      Config = other.config_ != null ? other.Config.Clone() : null;
      manifest_ = other.manifest_;
      hooks_ = other.hooks_.Clone();
      version_ = other.version_;
      namespace_ = other.namespace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Release Clone() {
      return new Release(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Name is the name of the release
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "info" field.</summary>
    public const int InfoFieldNumber = 2;
    private global::Hapi.Release.Info info_;
    /// <summary>
    /// Info provides information about a release
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hapi.Release.Info Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    /// <summary>Field number for the "chart" field.</summary>
    public const int ChartFieldNumber = 3;
    private global::Hapi.Chart.Chart chart_;
    /// <summary>
    /// Chart is the chart that was released.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hapi.Chart.Chart Chart {
      get { return chart_; }
      set {
        chart_ = value;
      }
    }

    /// <summary>Field number for the "config" field.</summary>
    public const int ConfigFieldNumber = 4;
    private global::Hapi.Chart.Config config_;
    /// <summary>
    /// Config is the set of extra Values added to the chart.
    /// These values override the default values inside of the chart.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Hapi.Chart.Config Config {
      get { return config_; }
      set {
        config_ = value;
      }
    }

    /// <summary>Field number for the "manifest" field.</summary>
    public const int ManifestFieldNumber = 5;
    private string manifest_ = "";
    /// <summary>
    /// Manifest is the string representation of the rendered template.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Manifest {
      get { return manifest_; }
      set {
        manifest_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hooks" field.</summary>
    public const int HooksFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Hapi.Release.Hook> _repeated_hooks_codec
        = pb::FieldCodec.ForMessage(50, global::Hapi.Release.Hook.Parser);
    private readonly pbc::RepeatedField<global::Hapi.Release.Hook> hooks_ = new pbc::RepeatedField<global::Hapi.Release.Hook>();
    /// <summary>
    /// Hooks are all of the hooks declared for this release.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Hapi.Release.Hook> Hooks {
      get { return hooks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 7;
    private int version_;
    /// <summary>
    /// Version is an int32 which represents the version of the release.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "namespace" field.</summary>
    public const int NamespaceFieldNumber = 8;
    private string namespace_ = "";
    /// <summary>
    /// Namespace is the kubernetes namespace of the release.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Namespace {
      get { return namespace_; }
      set {
        namespace_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Release);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Release other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Info, other.Info)) return false;
      if (!object.Equals(Chart, other.Chart)) return false;
      if (!object.Equals(Config, other.Config)) return false;
      if (Manifest != other.Manifest) return false;
      if(!hooks_.Equals(other.hooks_)) return false;
      if (Version != other.Version) return false;
      if (Namespace != other.Namespace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (info_ != null) hash ^= Info.GetHashCode();
      if (chart_ != null) hash ^= Chart.GetHashCode();
      if (config_ != null) hash ^= Config.GetHashCode();
      if (Manifest.Length != 0) hash ^= Manifest.GetHashCode();
      hash ^= hooks_.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (Namespace.Length != 0) hash ^= Namespace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (chart_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Chart);
      }
      if (config_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Config);
      }
      if (Manifest.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Manifest);
      }
      hooks_.WriteTo(output, _repeated_hooks_codec);
      if (Version != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Version);
      }
      if (Namespace.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Namespace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (chart_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Chart);
      }
      if (config_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Config);
      }
      if (Manifest.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Manifest);
      }
      size += hooks_.CalculateSize(_repeated_hooks_codec);
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (Namespace.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Namespace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Release other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.info_ != null) {
        if (info_ == null) {
          info_ = new global::Hapi.Release.Info();
        }
        Info.MergeFrom(other.Info);
      }
      if (other.chart_ != null) {
        if (chart_ == null) {
          chart_ = new global::Hapi.Chart.Chart();
        }
        Chart.MergeFrom(other.Chart);
      }
      if (other.config_ != null) {
        if (config_ == null) {
          config_ = new global::Hapi.Chart.Config();
        }
        Config.MergeFrom(other.Config);
      }
      if (other.Manifest.Length != 0) {
        Manifest = other.Manifest;
      }
      hooks_.Add(other.hooks_);
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.Namespace.Length != 0) {
        Namespace = other.Namespace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::Hapi.Release.Info();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (chart_ == null) {
              chart_ = new global::Hapi.Chart.Chart();
            }
            input.ReadMessage(chart_);
            break;
          }
          case 34: {
            if (config_ == null) {
              config_ = new global::Hapi.Chart.Config();
            }
            input.ReadMessage(config_);
            break;
          }
          case 42: {
            Manifest = input.ReadString();
            break;
          }
          case 50: {
            hooks_.AddEntriesFrom(input, _repeated_hooks_codec);
            break;
          }
          case 56: {
            Version = input.ReadInt32();
            break;
          }
          case 66: {
            Namespace = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
